1.进程描述符task_struct由于需要申请很多次，且申请空间可能很大。因此内核对此结构的处理释放，是在动态内存上申请。
  在进程空间内部保留thread_info结构里面记录了指向task_struct的指针。
  
2.为什么内核在对进程进行设计的时候，要给每一个进程设计一个栈？为什么要设计程序段、数据段、堆栈、全局变量？
  这是因为CPU要不断的切换执行不同的进程，当前进程A被中断的时候，我们需要保存那些信息呢？当然是代码执行到哪一步，局部变量有哪些，全局变量有哪些。
  堆里面其实存储的也是进程得数据，所以我们规划到数据一类。那么又为什么需要程序段、数据段这些东西？想一想好的代码设计都是需要进行解耦的。大家之间
  互相不干扰，那么彼此工作的就好。所以讲内存分隔为多个段。每一个段有自己可以操作的内存。
  
  内核在设计过程中，并不是复杂的难以想象。部分模块的设计肯定是需要复杂的算法的。但是谈到代码架构设计，那就是“内核该是什么样子，它就是什么样子”。
  没有多余的花哨的东西，一切为了简洁。怎么样设计能够满足便于程序员开发，便于扩展，代码不会腐化的令人难以想，那它就该怎么设计。
  
  谈到这里。内核栈和用户栈当然有区别了，用户的权限是低的。不可能让一个用户有着操作硬件的自由权限，那么怎么办呢？比如我的代码里面执行了一个fread
  操作，那么我怎么读取文件呢？怎么简单设计呢。难道我要重新在内核里面启动一个线程，单独负责文件读操作？事实是这种方法是可行的。只不过linux采用了
  另外一种巧妙的方法，既然用户已经创建了进程，并且进程就是在内核里面的，那么我当然可以复用了，直接用此进程保存一个内核函数的栈。彼此独立，借用用
  户进程实现内核函数的调用。
  
2.为什么内核在设计过程中给内核和用户进程分别设计栈空间？即内核栈、用户栈。首先我们来思考一个问题，为什么需要栈
